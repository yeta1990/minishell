
- lexer: identify each word to its category and store: cmd, redirections, heredoc, pipe, env definitions, etc.
- parser: ordering each instruction based on bash grammar
- data structure example:
	* cmd and its args, stdin, stdout, stderr. -> check execvce doc to take its args construction and syntax into account 
	* global data: number of pipes, num of cmds, ?
- some starters to test:
	* different instruction ordering: 
		cmd <infile >outfile
		>outfile >outfile2
		<infile <infile2 >outfile
		<infile >outfile cmd <infile2 
		<infile cmd >outfile | cmd >outfile
		<infile /absolute/path/to/cmd >outfile
		stderror redirections
		and so...
	* error handling: what happens when one error appears in the begginning, middle or end of the instructions order?

- other questions:
	* how really here_doc works?
	* working with env: what would happen if $PATH disappeared from 'env'? how does bash handle that situation? 

